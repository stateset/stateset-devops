apiVersion: apps/v1
kind: Deployment
metadata:
  name: stateset
  labels:
    app: stateset
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stateset
  template:
    metadata:
      labels:
        app: stateset
    spec:
      containers:
        - name: graphql-engine
          image: hasura/graphql-engine:v1.0.0-beta.6
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080         
          # The following environment variables will contain the database host,
          # user and password to connect to the PostgreSQL instance.
          command:
            - graphql-engine
            - --database-url
            - "postgres://$(POSTGRES_DB_USER):$(POSTGRES_DB_PASSWORD)@$(POSTGRES_DB_HOST)/postgres"
            - serve
          env:
            # [START Hasura config variables]
            - name: HASURA_GRAPHQL_ENABLE_CONSOLE
              value: "true"
            # [END Hasura config variables]
            - name: POSTGRES_DB_HOST
              value: 127.0.0.1:5432
            # [START cloudsql_secrets]
            - name: POSTGRES_DB_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: username
            - name: POSTGRES_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: password
            # [END cloudsql_secrets]
        - name: hasura-backend-plus
          image: elitan/hasura-backend-plus:latest
          ports: 
            - containerPort: 3000
          env:
            # [START Hasura Backend Plus config variables]
            - name: HASURA_GRAPHQL_ENDPOINT
              value: https://graphql-engine:8080/v1/graphql
            - name: HASURA_GRAPHQL_ADMIN_SECRET
              valueFrom:
                secretKeyRef:
                  name: hasura-backend-plus-credentials
                  key: hasura-admin-secret
            - name: HASURA_GRAPHQL_JWT_SECRET
              value: '{"type": "H256", "key": "secret_key"}'
        - name: stateset
          image: stateset/stateset:latest
          ports:
            - containerPort: 8080
          env:
            # [START Stateset CLM config variables]
            - name: STATESET_LEGAL_NAME
              value: organizationName
            - name: STATESET_P2P_ADDRESS
              value: organizationName
            - name: STATESET_KEY_STORE_PASSWORD
              value: organizationName
            - name: STATESET_TRUST_STORE_PASSWORD
              value: organizationName
            - name: STATESET_DB_USER
              value: organizationName
            - name: STATESET_DB_PASS
              value: organizationName
            - name: STATESET_DB_DRIVER
              value: organizationName
            - name: STATESET_DB_DIR
              value: organizationName
            - name: STATESET_DB_URL
              value: "postgres://$(POSTGRES_DB_USER):$(POSTGRES_DB_PASSWORD)@$(POSTGRES_DB_HOST)/postgres"
            - name: STATESET_DB_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: username
            - name: STATESET_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloudsql-db-credentials
                  key: password
        # Change [INSTANCE_CONNECTION_NAME] here to include your GCP
        # project, the region of your Cloud SQL instance and the name
        # of your Cloud SQL instance. The format is
        # $PROJECT:$REGION:$INSTANCE
        # [START proxy_container]
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command: ["/cloud_sql_proxy",
                    "-instances=[INSTANCE_CONNECTION_NAME]=tcp:5432",
                    "-credential_file=/secrets/cloudsql/credentials.json"]
          # [START cloudsql_security_context]
          securityContext:
            runAsUser: 2  # non-root user
            allowPrivilegeEscalation: false
          # [END cloudsql_security_context]
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
        # [END proxy_container]
      # [START volumes]
      volumes:
        - name: cloudsql-instance-credentials
          secret:
            secretName: cloudsql-instance-credentials
# [END volumes]